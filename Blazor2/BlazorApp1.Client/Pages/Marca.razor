@page "/marca"
@using BlazorApp1.Client.Services.Contracts
@using BlazorApp1.DTOs
@using CurrieTechnologies.Razor.SweetAlert2

@inject SweetAlertService Swal;
@inject IMarcaService marcaService;
@inject IJSRuntime JSRuntime;

<PageTitle>Marcas</PageTitle>

<h3>Marca</h3>

<div class="content mb-2">
    <div class="row">
        <input type="hidden" name="name" value="@idmarca" />

        <div class="col-md-12">
            <label>Categoria:</label>
            <InputText class="form-control" @bind-Value="marcaDTO.Nombre"></InputText>
        </div>

        <div class="col-md-12">
            <label>Descripcion:</label>
            <InputTextArea class="form-control" @bind-Value="marcaDTO.Descripcion"></InputTextArea>
        </div>

    </diV>

    <div class="row mt-2">
        <div class="col-4">
            <button class="btn btn-primary" @onclick="GuardarMarca">Guardar</button>
        </div>
    </div>

    <hr />

    <table id="example" class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Descripcion</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in listaMarca)
            {
                <tr>
                    <td>@item.Nombre</td>
                    <td>@item.Descripcion</td>
                    <td>
                        <button class="btn btn-sm btn-warning"
                                @onclick="@(() => EditarMarca(item.Idmarca))">
                            <span class="bi bi-pencil"></span>
                        </button>
                        <button class="btn btn-sm btn-danger"
                                @onclick="@(() => EliminarMarca(item.Idmarca))">
                            <span class="bi bi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>


</div>

@code {
    List<MarcaDTO> listaMarca = new List<MarcaDTO>();
    MarcaDTO marcaDTO = new MarcaDTO();
    int idmarca = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarListaMarcas();
        await DataTable();

    }

    private async Task CargarListaMarcas()
    {
        listaMarca = new List<MarcaDTO>();
        listaMarca = await marcaService.Listar();
    }

    private async Task DataTable()
    {
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd");
    }

    private async Task LimpiarTable()
    {
        await JSRuntime.InvokeAsync<object>("Limpiar");
    }

    private async Task GuardarMarca()
    {
        try
        {
            int id;
            string mensaje;

            string m = MarcaDTO.CamposVacios(marcaDTO);

            if(m.Length > 0)
            {
                await Swal.FireAsync("Error", m, SweetAlertIcon.Error);
            }
            else
            {
                if (this.idmarca == 0)
                {
                    id = await this.marcaService.Registrar(this.marcaDTO);
                    mensaje = "Marca Registrada Exitosamente";
                }
                else
                {
                    id = await this.marcaService.Editar(this.marcaDTO, this.idmarca);
                    mensaje = "Marca Editada Exitosamente";
                }

                if (id != 0)
                {
                    this.idmarca = 0;
                    this.marcaDTO = new MarcaDTO();

                    await Swal.FireAsync("Cambios Guardados", mensaje, SweetAlertIcon.Success);

                    await LimpiarTable();
                    await CargarListaMarcas();
                    await DataTable();
                }
                else
                {
                    await Swal.FireAsync("Error", "No se pudo guardar la categoria", SweetAlertIcon.Error);
                }
            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Ocurrió un error: {ex.Message}", SweetAlertIcon.Error);
        }
    }


    private async void EditarMarca(int id)
    {
        var marcaObtenida = await marcaService.Buscar(id);

        marcaDTO.Nombre = marcaObtenida.Nombre;
        marcaDTO.Descripcion = marcaObtenida.Descripcion;
        marcaDTO.Idmarca = marcaObtenida.Idmarca;

        this.idmarca = id;

        StateHasChanged();
    }

    private async void EliminarMarca(int id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar Marca",
                Text = "Deseas eliminar esta Marca?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
        });

        if (resultado.IsConfirmed)
        {
            var eliminado = await marcaService.Eliminar(id);

            if (eliminado)
            {
                await Swal.FireAsync("Eliminado", "Marca Eliminada del Registro", SweetAlertIcon.Info);
                await LimpiarTable();
                await CargarListaMarcas();
                await DataTable();
                StateHasChanged();
            }
            else
            {
               await Swal.FireAsync("Error", "No pudo ser eliminada la marca", SweetAlertIcon.Error); 
            }

        }
    }
}

